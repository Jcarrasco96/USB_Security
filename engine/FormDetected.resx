<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>